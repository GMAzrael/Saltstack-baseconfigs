# This is an example of a layered serverclass config. By layered, it means
# that a host may match several distinct classes, and that the configs
# installed on a given host will be the result of layering on several distinct
# application groups. This is in contrast to a "one-stop-shop" approach, where
# a host will only match a single class, and that class must provide *all* of
# the apps that the host will need.

# There are specific changes made recently to this example file to accommodate
# the recent changes to the deployment manager UI in Splunk 6. Specifically,
# an app cannot be listed twice with two different values of
# "restartSplunkd". This means (for example) that even though we treat a
# search head as a forwarder to send its indexed data to the indexer pool, we
# don't want to restart Splunk when the new app arrives, but we might want to
# do so for a forwarder. Unfortunately, this "impossible to have two values
# for restartSplunkd" means we can't "fire and forget" our forwarders without
# also simultaneously restarting our SH. So we compromise and set the SH to
# false, but restart a forwarder for new inputs.conf.

[global]

# This mapping assumes the following hosts are part of the environment:
# my-ds-ls.example.com (Deployment server / license manager, "this" host)
# my-searchhead.example.com (Standalone Search Head)
# indexer-1.example.com (Indexer, 1 of 3)
# indexer-2.example.com (Indexer, 2 of 3)
# indexer-3.example.com (Indexer, 3 of 3)
# syslog.example.com (Universal Forwarder, syslog collector)
# db2.example.com (Universal Forwarder, DB2 instance)
# heavy-fwd-a.example.com (Heavy Forwarder)
# heavy-fwd-b.example.com (Heavy Forwarder)

# ALL CLIENTS - KEEP DEPLOYMENT CLIENT UP TO DATE
[serverClass:all_clients]
whitelist.0 = *
[serverClass:all_clients:app:org_all_deploymentclient]

# FULL INSTANCES - SEARCH HEADS, HEAVY FORWARDERS, INDEXERS
[serverClass:full_instances]
whitelist.0 = my-searchhead.example.com
whitelist.1 = heavy-fwd-a|heavy-fwd-b
# Regexes can be used in white/blacklist entries.
whitelist.2 = indexer-[1-3].example.com
[serverClass:full_instances:app:org_all_indexes]
# Optionally put the license manager config in a separate app (server.conf)
[serverClass:full_instances:app:org_full_license_server]
# All of these "full instances" need props:
#  Indexers and heavies to parse
#  Search heads to provide search extractions
[serverClass:full_instances:app:org_all_app_props]

# ALL SEARCH HEADS
[serverClass:all_search]
whitelist.0 = splunk_search.example.com
# This is a search head.
[serverClass:all_search:app:org_all_search_base]
# Satisfy the volume: tag from org_all_indexes
[serverClass:all_search:app:org_search_volume_indexes]
# This SH will match a "forwarder" class below, receiving an outputs.conf
# to send data off box, but don't forget to turn off local indexing...
[serverClass:all_search:app:org_all_search_outputs]

# ALL INDEXERS
[serverClass:all_indexer]
whitelist.0 = indexer-[1-3].example.com
# Base indexer setup: listen on the wire, optionally turn off splunkweb....
[serverClass:all_indexer:app:org_all_indexer_base]
# Give these indexers a volume definition to satisfy the volume: tag from
# org_all_indexes. Also, since these hosts *store* data, the volume spec
# includes a maxVolumeDataSizeMB to cap usage.
[serverClass:all_indexer:app:org_indexer_volume_indexes]

# ALL FORWARDERS
[serverClass:all_forwarder]
whitelist.0 = *
blacklist.0 = indexer-[1-3].example.com
# outputs.conf requires a restart, but note that this will also restart
# the search head if the app changes.
[serverClass:all_forwarder:app:org_all_forwarder_outputs]
restartSplunkd = true

# DB2
[serverClass:db2]
whitelist.0 = mydb2.server
restartSplunkd = true
[serverClass:db2:app:org_dept_app_inputs]
